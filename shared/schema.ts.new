import { pgTable, text, serial, integer, boolean, timestamp, doublePrecision } from "drizzle-orm/pg-core";
import { relations } from "drizzle-orm";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// Users table
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  email: text("email").notNull().unique(),
  fullName: text("full_name").notNull(),
  avatarUrl: text("avatar_url"),
  bio: text("bio"),
  referrerCode: text("referrer_code"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
  email: true,
  fullName: true,
  avatarUrl: true,
  bio: true,
  referrerCode: true,
});

// Game types
export const gameTypes = pgTable("game_types", {
  id: serial("id").primaryKey(),
  name: text("name").notNull().unique(),
  iconClass: text("icon_class"),
});

export const insertGameTypeSchema = createInsertSchema(gameTypes).pick({
  name: true,
  iconClass: true,
});

// Tournament structure types
export const tournamentStructures = pgTable("tournament_structures", {
  id: serial("id").primaryKey(),
  name: text("name").notNull().unique(),
  description: text("description"),
});

export const insertTournamentStructureSchema = createInsertSchema(tournamentStructures).pick({
  name: true,
  description: true,
});

// Games table
export const games = pgTable("games", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  gameMasterId: integer("game_master_id").notNull().references(() => users.id),
  gameTypeId: integer("game_type_id").notNull().references(() => gameTypes.id),
  structureId: integer("structure_id").notNull().references(() => tournamentStructures.id),
  location: text("location").notNull(),
  datetime: timestamp("datetime").notNull(),
  maxPlayers: integer("max_players").notNull(),
  currentPlayers: integer("current_players").default(0).notNull(),
  entryFee: doublePrecision("entry_fee").notNull(),
  prizePool: doublePrecision("prize_pool").default(0).notNull(),
  isPrivate: boolean("is_private").default(false).notNull(),
  status: text("status").notNull().default("scheduled"), // scheduled, active, completed, cancelled, postponed
  payoutStructure: text("payout_structure").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const insertGameSchema = createInsertSchema(games).omit({
  id: true,
  currentPlayers: true,
  prizePool: true,
  createdAt: true,
}).extend({
  // Extend the schema to make datetime parsing more robust
  datetime: z.string().or(z.date()).transform(val => 
    typeof val === 'string' ? new Date(val) : val
  ),
  // Ensure numeric fields are properly handled
  maxPlayers: z.number().or(z.string().transform(val => parseInt(val, 10))),
  entryFee: z.number().or(z.string().transform(val => parseFloat(val))),
  // Ensure proper references
  gameTypeId: z.number().or(z.string().transform(val => parseInt(val, 10))),
  structureId: z.number().or(z.string().transform(val => parseInt(val, 10))),
});

// Game participants
export const gameParticipants = pgTable("game_participants", {
  id: serial("id").primaryKey(),
  gameId: integer("game_id").notNull().references(() => games.id),
  userId: integer("user_id").notNull().references(() => users.id),
  joinedAt: timestamp("joined_at").defaultNow().notNull(),
  hasPaid: boolean("has_paid").default(false).notNull(),
  referredBy: integer("referred_by").references(() => users.id),
});

export const insertGameParticipantSchema = createInsertSchema(gameParticipants).pick({
  gameId: true,
  userId: true,
  referredBy: true,
});

// Referrals
export const referrals = pgTable("referrals", {
  id: serial("id").primaryKey(),
  referrerId: integer("referrer_id").notNull().references(() => users.id),
  referredUserId: integer("referred_user_id").notNull().references(() => users.id),
  gameId: integer("game_id").references(() => games.id),
  earnings: doublePrecision("earnings").default(0).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const insertReferralSchema = createInsertSchema(referrals).pick({
  referrerId: true,
  referredUserId: true,
  gameId: true,
});

// Earnings
export const earnings = pgTable("earnings", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id),
  gameId: integer("game_id").references(() => games.id),
  amount: doublePrecision("amount").notNull(),
  type: text("type").notNull(), // winner, game_master, referrer
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const insertEarningSchema = createInsertSchema(earnings).pick({
  userId: true,
  gameId: true,
  amount: true,
  type: true,
});

// Notifications table
export const notifications = pgTable("notifications", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id),
  type: text("type").notNull(), // game, payment, system
  title: text("title").notNull(),
  message: text("message").notNull(),
  read: boolean("read").default(false).notNull(),
  actionUrl: text("action_url"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const insertNotificationSchema = createInsertSchema(notifications).pick({
  userId: true,
  type: true,
  title: true,
  message: true,
  actionUrl: true,
});

// User notification settings
export const notificationSettings = pgTable("notification_settings", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id).unique(),
  emailNotifications: boolean("email_notifications").default(true).notNull(),
  gameInvites: boolean("game_invites").default(true).notNull(),
  gameMasterUpdates: boolean("game_master_updates").default(true).notNull(),
  paymentAlerts: boolean("payment_alerts").default(true).notNull(),
  marketingEmails: boolean("marketing_emails").default(false).notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export const insertNotificationSettingsSchema = createInsertSchema(notificationSettings).pick({
  userId: true,
  emailNotifications: true,
  gameInvites: true,
  gameMasterUpdates: true,
  paymentAlerts: true,
  marketingEmails: true,
});

// Define relations
export const gameTypesRelations = relations(gameTypes, ({ many }) => ({
  games: many(games, { relationName: "gameType" }),
}));

export const tournamentStructuresRelations = relations(tournamentStructures, ({ many }) => ({
  games: many(games, { relationName: "structure" }),
}));

export const gamesRelations = relations(games, ({ one, many }) => ({
  gameMaster: one(users, {
    fields: [games.gameMasterId],
    references: [users.id],
    relationName: "gameMaster"
  }),
  gameType: one(gameTypes, {
    fields: [games.gameTypeId],
    references: [gameTypes.id],
    relationName: "gameType"
  }),
  structure: one(tournamentStructures, {
    fields: [games.structureId],
    references: [tournamentStructures.id],
    relationName: "structure"
  }),
  participants: many(gameParticipants, { relationName: "game" }),
  referrals: many(referrals, { relationName: "game" }),
  earnings: many(earnings, { relationName: "game" }),
}));

export const gameParticipantsRelations = relations(gameParticipants, ({ one }) => ({
  game: one(games, {
    fields: [gameParticipants.gameId],
    references: [games.id],
    relationName: "game"
  }),
  user: one(users, {
    fields: [gameParticipants.userId],
    references: [users.id],
    relationName: "participant"
  }),
  referrer: one(users, {
    fields: [gameParticipants.referredBy],
    references: [users.id]
  }),
}));

export const referralsRelations = relations(referrals, ({ one }) => ({
  referrer: one(users, {
    fields: [referrals.referrerId],
    references: [users.id],
    relationName: "referrer"
  }),
  referredUser: one(users, {
    fields: [referrals.referredUserId],
    references: [users.id],
    relationName: "referredUser"
  }),
  game: one(games, {
    fields: [referrals.gameId],
    references: [games.id],
    relationName: "game"
  }),
}));

export const earningsRelations = relations(earnings, ({ one }) => ({
  user: one(users, {
    fields: [earnings.userId],
    references: [users.id],
    relationName: "earner"
  }),
  game: one(games, {
    fields: [earnings.gameId],
    references: [games.id],
    relationName: "game"
  }),
}));

export const notificationsRelations = relations(notifications, ({ one }) => ({
  user: one(users, {
    fields: [notifications.userId],
    references: [users.id],
  }),
}));

export const notificationSettingsRelations = relations(notificationSettings, ({ one }) => ({
  user: one(users, {
    fields: [notificationSettings.userId],
    references: [users.id],
  }),
}));

export const usersRelations = relations(users, ({ many }) => ({
  createdGames: many(games, { relationName: "gameMaster" }),
  participatedGames: many(gameParticipants, { relationName: "participant" }),
  referrals: many(referrals, { relationName: "referrer" }),
  referredBy: many(referrals, { relationName: "referredUser" }),
  earnings: many(earnings, { relationName: "earner" }),
  notifications: many(notifications),
  settings: many(notificationSettings),
}));

// Export types
export type User = typeof users.$inferSelect;
export type InsertUser = z.infer<typeof insertUserSchema>;

export type GameType = typeof gameTypes.$inferSelect;
export type InsertGameType = z.infer<typeof insertGameTypeSchema>;

export type TournamentStructure = typeof tournamentStructures.$inferSelect;
export type InsertTournamentStructure = z.infer<typeof insertTournamentStructureSchema>;

export type Game = typeof games.$inferSelect;
export type InsertGame = z.infer<typeof insertGameSchema>;

export type GameParticipant = typeof gameParticipants.$inferSelect;
export type InsertGameParticipant = z.infer<typeof insertGameParticipantSchema>;

export type Referral = typeof referrals.$inferSelect;
export type InsertReferral = z.infer<typeof insertReferralSchema>;

export type Earning = typeof earnings.$inferSelect;
export type InsertEarning = z.infer<typeof insertEarningSchema>;

export type Notification = typeof notifications.$inferSelect;
export type InsertNotification = z.infer<typeof insertNotificationSchema>;

export type NotificationSetting = typeof notificationSettings.$inferSelect;
export type InsertNotificationSetting = z.infer<typeof insertNotificationSettingsSchema>;